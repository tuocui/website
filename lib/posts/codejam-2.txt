Jamming some code - pt. 2


<p>Part deux (oh man, my high school French is really paying off) of my posts about <a href="http://code.google.com/codejam/">Google Codejam</a>. You can find my previews post about Magic <a href="/thoughts/2">here</a>. As always, you can see my full solutions on <a href="https://github.com/tuocui/codejam">Github</a>. Alright, that's enough boilerplate, let's get to the nitty gritty.</p>

<h2>Cookie Clicker Alpha</h2>
<p><a href="http://code.google.com/codejam/contest/2974486/dashboard#s=p1">Problem</a></p>
<p>The second question for the qualification round. As such, it requires a bit more thinking than the magic problem (which was quite simple).</p>

<p>For those who aren't familiar with the (in)famous Cookie Clicker, it is a never-ending game where you are acquiring cookies at an ever increasing rate with the help of your own clicks, cookie farms, factories, and grandmas. You can check it out <a href="http://orteil.dashnet.org/cookieclicker/">here</a>, but be warned, it just might run forever on your machine.</p>

<p>The problem is essentially an optimization problem under the premise of a very simplied Cookie Clicker. You are given three numbers, C, F, and X. The purpose is the reach X cookies as fast as possible using a base of 2.0 cookies per second. C represents the number of cookies to purchase a cookie farm. A cookie farm yields an additional F cookies per second.</p>
<p>Ex: C = 30.0, F = 1.0, X = 2.0 will have a result of 1 second (since you already start by having 2 cookies/second, and only need to go up to 2 cookies)</p>

<p>Note: You gain cookies continuously, meaning after π seconds after the game starts, you will have 2π cookies.</p>

<p>The main issue with this problem is that you need to figure out at what point will purchasing a factory actually decrease the time it takes to reach X. After that point, it will take longer to wait to purchase a factory, then wait until X cookies than it is to just wait until X cookies<sup>hint</sup>.</p>

<p>The amount of time it takes to be able to purchase a factory from 0 cookies is C / CPS (where CPS = cookies/second). The amount of time to reach X is X / CPS. As such, we need to figure out the exact time where <code class="inline">(C / CPS) + (X / (CPS + F)) > (X / CPS)</code>. That is, the point where purchasing a factory (C / CPS) and then waiting for X (X / (CPS + F)) will actually take longer than just waiting for X cookies (X / CPS)</p>

<p>This is a solvable solution mathematically, but there's no need. We can just keep looping until the above condition holds, all while incrementing time by C / CPS (amount of time it takes to actually purchase a factory)</p>

<code>
  time = 0.0
  cps = 2.0
  line = f_read.readline.split(" ")
  c = line[0].to_f
  f = line[1].to_f
  x = line[2].to_f

  while true do
  &nbspif (c/cps) + (x / (cps + f)) < (x / cps)
  &nbsp&nbsp    time += c/cps
  &nbsp&nbsp    cps += f
  &nbsp  else
  &nbsp&nbsp    time += x/cps
  &nbsp&nbsp    break
  &nbsp  end
  end
</code>

<p>Note: I'm actually checking for the opposite condition, but that doesn't change the logic.</p>

<p>Next up: Minesweeper</p>

